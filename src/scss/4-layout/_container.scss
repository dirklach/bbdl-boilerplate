@use "../1-variables/" as *;
@use "../2-tools" as *;

// ==================================================================
// Layout / Container
// ==================================================================

.container {
  --default-column-gap: var(--space-2xs);
  --default-row-gap: var(--space-2xs);
  --default-columns: 12;
  --default-container-width: 1600px;
  --small-container-width: 900px;

  display: grid;
  column-gap: var(--default-column-gap);
  row-gap: var(--default-row-gap);
  grid-template-columns: repeat(var(--default-columns), 1fr);
  margin-left: auto;
  margin-right: auto;
  max-width: var(--default-container-width);

  &.--small {
    max-width: var(--small-container-width);
  }

  &.--auto {
    // equal columns
    grid-auto-columns: minmax(0, 1fr);
    grid-auto-flow: column;
  }
}

// ==================================================================
// Layout / Default Alignment
// ==================================================================

[data-align] {
  align-items: stretch; // Default to stretch or any other default behavior
}

// ==================================================================
// Mixin for alignment options
// ==================================================================
@mixin generate-alignment($prefix, $min-width) {
  @media (min-width: $min-width) {
    [data-align*="#{$prefix}\:start"] {
      align-items: start;
    }
    [data-align*="#{$prefix}\:center"] {
      align-items: center;
    }
    [data-align*="#{$prefix}\:end"] {
      align-items: end;
    }
  }
}

// ==================================================================
// Block / Loop through breakpoints map to generate grid, offset, and alignment classes
// ==================================================================
@each $prefix, $min-width in $breakpoints {
  @include generate-alignment($prefix, $min-width);
}
